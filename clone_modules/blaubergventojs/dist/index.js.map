{"version":3,"file":"index.js","sources":["../../../../../node_modules/tslib/tslib.es6.js","../src/client/function-type.ts","../src/client/parameter.ts","../src/client/packet.ts","../src/client/data-entry.ts","../src/client/blauberg-vento-client.ts","../src/resource/device.ts","../src/resource/mode.ts","../src/resource/speed.ts","../src/resource/blauberg-vento-resource.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * FunctionType enumeration.\n * \n * This enum defines the different types of functions that can be used in communication protocols.\n * Each type is represented by a unique byte value.\n */\nexport enum FunctionType {\n    /**\n     * READ function type.\n     * \n     * Indicates a request to read data from a device or controller.\n     */\n    READ = 0x01,\n\n    /**\n     * WRITE function type.\n     * \n     * Indicates a request to write data to a device or controller.\n     */\n    WRITE = 0x02,\n\n    /**\n     * WRITEREAD function type.\n     * \n     * Indicates a request to both write data to and read data from a device or controller.\n     */\n    WRITEREAD = 0x03,\n\n    /**\n     * INCREAD function type.\n     * \n     * Indicates a request to increment a value on a device or controller and read the result.\n     */\n    INCREAD = 0x04,\n\n    /**\n     * DECREAD function type.\n     * \n     * Indicates a request to decrement a value on a device or controller and read the result.\n     */\n    DECREAD = 0x05,\n\n    /**\n     * RESPONSE function type.\n     * \n     * Indicates a response from a device or controller to a request.\n     */\n    RESPONSE = 0x06\n}\n","/**\n * Parameter enumeration.\n * \n * This enum defines various parameters used in communication with devices or controllers.\n * Each parameter is associated with a unique byte value that represents a specific setting or state.\n */\nexport enum Parameter {\n    ON_OFF = 0x01,\n    SPEED = 0x02,\n    BOOT_MODE = 0x06,\n    TIMER_MODE = 0x07,\n    TIMER_COUNT_DOWN = 0x08,\n    HUMIDITY_SENSOR_ACTIVATION = 0x0F,\n    RELAY_SENSOR_ACTIVIATION = 0x14,\n    VOLTAGE_SENSOR_ACTIVATION = 0x16, // 0-10V\n    HUMIDITY_THRESHOLD = 0x19,\n    CURRENT_RTC_BATTERY_VOLTAGE = 0x24, // 0-5000mv\n    CURRENT_HUMIDITY = 0x25,\n    CURRENT_VOLTAGE_SENSOR_STATE = 0x2D, // 0-100\n    CURRENT_RELAY_SENSOR_STATE = 0x32,\n    MANUAL_SPEED = 0x44,\n    FAN1RPM = 0x4A,\n    FAN2RPM = 0x4B,\n    FILTER_TIMER = 0x64,\n    RESET_FILTER_TIMER = 0x65,\n    BOOST_MODE_DEACTIVATION_DELAY = 0x66, // 0-60 minutes\n    RTC_TIME = 0x6F,\n    RTC_CALENDAR = 0x70,\n    WEEKLY_SCHEDULE = 0x72,\n    SCHEDULE_SETUP = 0x77,\n    SEARCH = 0x7C,\n    PASSWORD = 0x7D,\n    MACHINE_HOURS = 0x7E,\n    RESET_ALARMS = 0x80,\n    READ_ALARM = 0x83,\n    CLOUD_SERVER_OPERATION_PERMISSION = 0x85,\n    READ_FIRMWARE_VERSION = 0x86,\n    RESTORE_FACTORY_SETTINGS = 0x87,\n    FILTER_ALARM = 0x88,\n    WIFI_MODE = 0x94,\n    WIFI_NAME = 0x95,\n    WIFI_PASSWORD = 0x96,\n    WIFI_ENCRYPTION = 0x99,\n    WIFI_CHANNEL = 0x9A,\n    WIFI_DHCP = 0x9B,\n    IP_ADDRESS = 0x9C,\n    SUBNET_MASK = 0x9D,\n    GATEWAY = 0x9E,\n    CURRENT_IP_ADDRESS = 0xA3,\n    VENTILATION_MODE = 0xB7,\n    UNIT_TYPE = 0xB9\n}\n\n/**\n * Parameter details with size information.\n * \n * An array of parameter details specifying the size in bytes for each parameter.\n */\nconst details: { param: number, size: number }[] = [\n    { param: Parameter.ON_OFF, size: 1 },\n    { param: Parameter.SPEED, size: 1 },\n    { param: Parameter.BOOT_MODE, size: 1 },\n    { param: Parameter.TIMER_MODE, size: 1 },\n    { param: Parameter.TIMER_COUNT_DOWN, size: 3 },\n    { param: Parameter.HUMIDITY_SENSOR_ACTIVATION, size: 1 },\n    { param: Parameter.VOLTAGE_SENSOR_ACTIVATION, size: 1 },\n    { param: Parameter.HUMIDITY_THRESHOLD, size: 1 },\n    { param: Parameter.CURRENT_RTC_BATTERY_VOLTAGE, size: 2 },\n    { param: Parameter.CURRENT_HUMIDITY, size: 1 },\n    { param: Parameter.CURRENT_VOLTAGE_SENSOR_STATE, size: 1 },\n    { param: Parameter.CURRENT_RELAY_SENSOR_STATE, size: 1 },\n    { param: Parameter.MANUAL_SPEED, size: 1 },\n    { param: Parameter.FAN1RPM, size: 2 },\n    { param: Parameter.FAN2RPM, size: 2 },\n    { param: Parameter.FILTER_TIMER, size: 3 },\n    { param: Parameter.RESET_FILTER_TIMER, size: 1 },\n    { param: Parameter.BOOST_MODE_DEACTIVATION_DELAY, size: 1 },\n    { param: Parameter.RTC_TIME, size: 3 },\n    { param: Parameter.RTC_CALENDAR, size: 4 },\n    { param: Parameter.WEEKLY_SCHEDULE, size: 1 },\n    { param: Parameter.SCHEDULE_SETUP, size: 6 },\n    { param: Parameter.SEARCH, size: 16 },\n    { param: Parameter.MACHINE_HOURS, size: 4 },\n    { param: Parameter.RESET_ALARMS, size: 1 },\n    { param: Parameter.READ_ALARM, size: 1 },\n    { param: Parameter.CLOUD_SERVER_OPERATION_PERMISSION, size: 1 },\n    { param: Parameter.READ_FIRMWARE_VERSION, size: 6 },\n    { param: Parameter.RESTORE_FACTORY_SETTINGS, size: 1 },\n    { param: Parameter.FILTER_ALARM, size: 1 },\n    { param: Parameter.WIFI_MODE, size: 1 },\n    { param: Parameter.WIFI_NAME, size: 0 },\n    { param: Parameter.WIFI_PASSWORD, size: 0 },\n    { param: Parameter.WIFI_ENCRYPTION, size: 1 },\n    { param: Parameter.WIFI_CHANNEL, size: 1 },\n    { param: Parameter.WIFI_DHCP, size: 1 },\n    { param: Parameter.IP_ADDRESS, size: 4 },\n    { param: Parameter.SUBNET_MASK, size: 4 },\n    { param: Parameter.VENTILATION_MODE, size: 1 },\n    { param: Parameter.UNIT_TYPE, size: 2 },\n];\n\n/**\n * Parameter namespace.\n * \n * Contains utility functions for working with parameters.\n */\nexport namespace Parameter {\n    /**\n     * Gets the size in bytes for a given parameter.\n     * \n     * @param {Parameter} parameter - The parameter for which to get the size.\n     * @returns {number} The size in bytes of the parameter, or -1 if the parameter is unknown.\n     */\n    export function getSize(parameter: Parameter): number {\n        const detail = details.find(d => d.param === parameter);\n        return detail?.size ?? -1;\n    }\n}\n","/**\n * Packet class.\n * \n * Represents a communication packet used in the protocol. The packet includes headers, credentials, \n * function types, data entries, and a checksum to ensure data integrity. It provides methods to \n * serialize the packet to bytes and to deserialize it from bytes.\n */\n\nimport { DataEntry } from \"./data-entry\";\nimport { FunctionType } from \"./function-type\";\nimport { Parameter } from \"./parameter\";\n\nconst MAX_PACKET_SIZE = 256;\nconst HEADER = [0xFD, 0xFD];\nconst PROTOCOL_TYPE = 0x02;\n\n/**\n * Packet class.\n * \n * This class is used to create, serialize, and deserialize packets for communication. It includes \n * functionality to handle different types of functions and data entries, as well as to validate \n * the integrity of the packet using a checksum.\n */\nexport class Packet {\n    private _deviceId: string;\n    private _password: string;\n    private _functionType: FunctionType;\n    private _dataEntries: DataEntry[];\n\n    /**\n     * Creates a new Packet instance.\n     * \n     * @param {string} deviceId - The device ID to include in the packet.\n     * @param {string} password - The password for the device.\n     * @param {FunctionType} functionType - The type of function to perform.\n     * @param {DataEntry[]} dataEntries - The data entries to include in the packet.\n     */\n    constructor(deviceId: string, password: string, functionType: FunctionType, dataEntries: DataEntry[]) {\n        this._deviceId = deviceId;\n        this._password = password;\n        this._functionType = functionType;\n        this._dataEntries = dataEntries;\n    }\n\n    /**\n     * Gets the device ID.\n     * \n     * @returns {string} The device ID.\n     */\n    get deviceId() {\n        return this._deviceId;\n    }\n\n    /**\n     * Gets the password.\n     * \n     * @returns {string} The password.\n     */\n    get password() {\n        return this._password;\n    }\n\n    /**\n     * Gets the function type.\n     * \n     * @returns {FunctionType} The function type.\n     */\n    get functionType(): FunctionType {\n        return this._functionType;\n    }\n\n    /**\n     * Gets the data entries.\n     * \n     * @returns {DataEntry[]} The data entries.\n     */\n    get dataEntries(): DataEntry[] {\n        return this._dataEntries;\n    }\n\n    /**\n     * Serializes the packet to a byte array.\n     * \n     * The packet is serialized into a Uint8Array with a specific format including a header, protocol type,\n     * credentials, function type, data entries, and a checksum.\n     * \n     * @returns {Uint8Array} The serialized byte array of the packet.\n     */\n    public toBytes(): Uint8Array {\n        let bytes = new Uint8Array(MAX_PACKET_SIZE);\n        let index = 0;\n\n        // Header\n        bytes[index++] = HEADER[0];\n        bytes[index++] = HEADER[1];\n\n        // Protocol Type\n        bytes[index++] = PROTOCOL_TYPE;\n        \n        // Credentials\n        index = this.writeCredential(bytes, index, this._deviceId);\n        index = this.writeCredential(bytes, index, this._password);\n\n        // Function\n        bytes[index++] = this._functionType;\n\n        // Data\n        this._dataEntries.forEach(e => {\n            bytes[index++] = e.parameter;\n            if(e.value != null && \n                (this.functionType == FunctionType.WRITE || this.functionType == FunctionType.WRITEREAD)) {\n                const size = Parameter.getSize(e.parameter);\n                for(let i=0;i<size;i++) {\n                    bytes[index++] = e.value[i];\n                }\n            }\n        })\n\n        // CRC\n        const checksum = Packet.calculateChecksum(bytes.subarray(2, index));\n        bytes[index++] = checksum & 0xFF;\n        bytes[index++] = checksum >> 8;\n\n        // Trim\n        bytes = bytes.subarray(0, index);\n\n        return bytes;\n    }\n\n    /**\n     * Deserializes a byte array into a Packet instance.\n     * \n     * @param {Uint8Array} bytes - The byte array to deserialize.\n     * @returns {Packet} The deserialized Packet instance.\n     * @throws {Error} If the header, protocol type, or checksum are invalid.\n     */\n    public static fromBytes(bytes: Uint8Array): Packet {\n        let index = 0;\n\n        // Header\n        const header = [bytes[index++], bytes[index++]];\n        if(header[0] != HEADER[0] || header[1] != HEADER[1]) throw new Error('Invalid header.');\n\n        // Protocol Type\n        const protocolType  = bytes[index++];\n        if(protocolType != PROTOCOL_TYPE) throw new Error('Invalid protocol type.');\n\n        // Checksum\n        const checksum = Packet.calculateChecksum(bytes.subarray(2, bytes.length - 2));\n        const datachecksum = bytes[bytes.length - 2] + (bytes[bytes.length - 1] << 8);\n        if(checksum != datachecksum) throw new Error('Invalid checksum.');\n\n        // Controller ID\n        const idResult = Packet.readCredential(bytes, index);\n        const controllerId = idResult[0];\n        index = idResult[1];\n\n        // Password\n        const passwordResult = Packet.readCredential(bytes, index);\n        const password = passwordResult[0];\n        index = passwordResult[1];\n\n        // Function\n        const functionType = bytes[index++];\n\n        // Data\n        const dataResult = Packet.readParameters(bytes, index);\n\n        return new Packet(controllerId, password, functionType, dataResult[0]);\n    }\n\n    /**\n     * Reads a credential from the byte array.\n     * \n     * @param {Uint8Array} bytes - The byte array containing the credential.\n     * @param {number} index - The starting index to read from.\n     * @returns {[string, number]} A tuple containing the credential string and the next index.\n     */\n    private static readCredential(bytes: Uint8Array, index: number): [string, number] {\n        const credentialSize = bytes[index++];\n        let credential = '';\n        for (let i = 0; i < credentialSize; i++) {\n            credential += String.fromCharCode(bytes[index++]);\n        }\n        return [credential, index];\n    }\n\n    /**\n     * Writes a credential to the byte array.\n     * \n     * @param {Uint8Array} bytes - The byte array to write to.\n     * @param {number} index - The starting index to write at.\n     * @param {string} value - The credential to write.\n     * @returns {number} The next index after writing the credential.\n     */\n    private writeCredential(bytes: Uint8Array, index: number, value: string): number {\n        bytes[index++] = value.length;\n        for (let i = 0; i < value.length; i++) {\n            bytes[index++] = value.charCodeAt(i);\n        }\n        return index;\n    }\n\n    /**\n     * Reads data entries (parameters and values) from the byte array.\n     * \n     * @param {Uint8Array} bytes - The byte array containing the data entries.\n     * @param {number} index - The starting index to read from.\n     * @returns {[DataEntry[], number]} A tuple containing the array of DataEntry objects and the next index.\n     */\n    private static readParameters(bytes: Uint8Array, index: number): [DataEntry[], number] {\n        const entries: DataEntry[] = [];\n        while(index < bytes.length - 3) {\n            let parameter = bytes[index++];\n            let value: Uint8Array;\n            let size = 1;\n            if(parameter == 0xFE) {\n                // Change parameter size\n                size = bytes[index++];\n                parameter = bytes[index++];\n            } else {\n                size = Parameter.getSize(parameter);\n                if(size < 0) throw new Error(`Invalid parameter [param=${parameter}]`);\n            }\n\n            if(size > 0) {\n                value = new Uint8Array(size);\n                for(let i = 0; i < size; i++) {\n                    value[i] = bytes[index++];\n                }\n            }\n            entries.push({parameter, value});\n        }\n        return [entries, index];\n    }\n\n    /**\n     * Calculates the checksum for a byte array.\n     * \n     * @param {Uint8Array} bytes - The byte array to calculate the checksum for.\n     * @returns {number} The calculated checksum.\n     */\n    private static calculateChecksum(bytes: Uint8Array): number {\n        let checksum = 0;\n        for(let i = 0; i < bytes.length; i++) {\n            checksum += bytes[i];\n        }\n        return checksum & 0xFFFF;\n    }\n}\n","/**\n * DataEntry module.\n * \n * This module defines the structure for data entries used in communication protocols. It includes\n * an interface to represent a data entry and a namespace with a utility function to create data entries.\n */\n\nimport { Parameter } from \"./parameter\";\n\n/**\n * DataEntry interface.\n * \n * Represents a single entry of data with an associated parameter and optional value.\n * \n * @property {Parameter} parameter - The parameter associated with this data entry.\n * @property {Uint8Array | undefined} [value] - The value of the data entry, represented as a Uint8Array.\n */\nexport interface DataEntry {\n    parameter: Parameter;\n    value?: Uint8Array;\n}\n\nexport namespace DataEntry {\n    /**\n     * Creates a new DataEntry instance.\n     * \n     * This function constructs a DataEntry object with a specified parameter and an optional value.\n     * The value is converted to a Uint8Array if provided.\n     * \n     * @param {Parameter} parameter - The parameter to associate with the data entry.\n     * @param {number} [value] - The value to be included in the data entry (optional). If provided, it is converted to a Uint8Array.\n     * @returns {DataEntry} A new DataEntry object with the given parameter and value.\n     */\n    export function of(parameter: Parameter, value?: number): DataEntry {\n        return {parameter, value: value != null ? Uint8Array.of(value) : undefined};\n    }\n}\n","/**\n * BlaubergVentoClient module.\n * \n * This module provides a client interface for discovering and communicating with Blauberg Vento devices \n * over the local network using UDP. The client is capable of broadcasting packets to find devices, \n * and sending data packets to specific controllers to retrieve responses or configure the device.\n */\n\nimport { Packet } from \"./packet\";\nimport { createSocket } from 'dgram';\nimport { FunctionType } from \"./function-type\";\nimport { DataEntry } from \"./data-entry\";\nimport { Parameter } from \"./parameter\";\nimport { Response } from \"./response\";\n\nconst BROADCAST_ADDRESS = \"255.255.255.255\";\nconst DEFAULT_TIMEOUT = 1000;\n\n/**\n * DeviceAddress interface.\n * \n * Represents the structure of a discovered device's address information.\n * \n * @property {string} id - The unique identifier of the device (usually extracted from the packet).\n * @property {string} ip - The IP address of the discovered device.\n */\nexport interface DeviceAddress {\n    id: string;\n    ip: string;\n}\n\n/**\n * BlaubergVentoClient class.\n * \n * This class provides methods to discover Blauberg Vento devices on the local network and to communicate\n * with specific controllers via UDP. It broadcasts messages to detect devices and handles the reception \n * of responses from these devices.\n */\nexport class BlaubergVentoClient {\n    \n    timeout = DEFAULT_TIMEOUT;\n    broadcast_address = BROADCAST_ADDRESS;\n\n    /**\n     * Find devices on the network by emitting a broadcast packet and collecting all answering controllers.\n     * \n     * This method sends a broadcast UDP message with a search packet to discover Blauberg Vento devices. \n     * The devices respond with their identifiers and IP addresses, which are collected and returned.\n     * \n     * @returns {Promise<DeviceAddress[]>} A promise that resolves to an array of DeviceAddress objects \n     * representing the discovered devices.\n     */\n    public async findDevices(): Promise<DeviceAddress[]> {\n        const packet = new Packet('DEFAULT_DEVICEID', '', FunctionType.READ, [DataEntry.of(Parameter.SEARCH)]);\n        const socket = createSocket('udp4');\n\n        // Listen for the socket to be ready and send the broadcast packet\n        socket.on('listening', function () {\n            socket.setBroadcast(true);\n            const data = packet.toBytes();\n            socket.send(data, 4000, this.broadcast_address);\n        });\n\n        // Create a promise that resolves once devices have been collected or the timeout has been reached\n        const prom = new Promise<DeviceAddress[]>(resolve => {\n            const devices: DeviceAddress[] = [];\n            let lastResponseTime = new Date();\n\n            // Check for timeouts and resolve the promise if no new responses are received\n            const intervalHandle = setInterval(() => {\n                const now = new Date();\n                if(now.getTime() - lastResponseTime.getTime() > this.timeout) {\n                    clearInterval(intervalHandle);\n                    socket.close();\n                    resolve(devices);\n                }\n            }, 20);\n\n            // Handle incoming messages and collect device information\n            socket.on('message', function (message, remote) {\n                const packet = Packet.fromBytes(message);\n                \n                // Only handle response packets from devices\n                if(packet.functionType == FunctionType.RESPONSE) {\n                    devices.push({id: packet.deviceId, ip: remote.address});\n                    lastResponseTime = new Date();\n                }\n            });\n        });\n\n        // Bind the socket to start listening\n        socket.bind();\n        return prom;\n    }\n\n    /**\n     * Sends a packet to a specific controller.\n     * \n     * This method sends a data packet to a specific Blauberg Vento controller via its IP address.\n     * It listens for a response packet and resolves with the packet or void if no response is received within the timeout period.\n     * \n     * @param {Packet} packet - The packet to send to the controller.\n     * @param {string} [ip=BROADCAST_ADDRESS] - The IP address of the controller (default is the broadcast address).\n     * @returns {Promise<Response | void>} A promise that resolves with a response packet if received, or void if no response.\n     */\n    public send(packet: Packet, ip: string = this.broadcast_address): Promise<Response | void> {\n        const socket = createSocket('udp4');\n        console.log('send', ip);\n\n        // Create a promise that resolves once the packet is acknowledged or the timeout is reached\n        const prom = new Promise<Response | void>(resolve => {\n            let requestTime = new Date();\n\n            // Helper function to resolve the promise and clean up resources\n            const doResolve = (packet?: Packet, ip?: string) => {\n                console.log('resolve: ', packet);\n                clearInterval(intervalHandle);\n                socket.close();\n                resolve(packet != null ? {packet, ip} : null);\n            }\n\n            // Check for timeouts and resolve the promise if no response is received\n            const intervalHandle = setInterval(() => {\n                const now = new Date();\n                if(now.getTime() - requestTime.getTime() > this.timeout) {\n                    doResolve();\n                }\n            }, 20);\n\n            // Send the packet once the socket is ready\n            socket.on('listening', function () {\n                requestTime = new Date();\n                const data = packet.toBytes();\n                console.log('Sending', ip, packet);\n                socket.send(data, 4000, ip);\n            });\n            \n            // Handle incoming messages and resolve if a valid response is received\n            socket.on('message', function (message, remote) {\n                const packet = Packet.fromBytes(message);\n                \n                // Only handle response packets from the controller\n                if(packet.functionType == FunctionType.RESPONSE) {\n                    doResolve(packet, remote.address);\n                }\n            });\n        });\n\n        // Bind the socket to start listening\n        socket.bind();\n        return prom;\n    }\n\n}\n","import { Persistable } from \"@apaq/leap-data-core\";\nimport { DataEntry } from \"../client/data-entry\";\nimport { FunctionType } from \"../client/function-type\";\nimport { Packet } from \"../client/packet\";\nimport { Parameter } from \"../client/parameter\";\nimport { Mode } from \"./mode\";\nimport { Speed } from \"./speed\";\n\n/**\n * A class representing a single Duke One Device.\n * \n * This class provides methods to serialize and deserialize device state\n * from and to `Packet` instances, and to manage device-specific properties.\n */\nexport class Device implements Persistable<string> {\n\n    /**\n     * The current speed setting of the device.\n     */\n    speed?: Speed;\n\n    /**\n     * The current mode of the device.\n     */\n    mode?: Mode;\n\n    /**\n     * The manual speed setting of the device.\n     */\n    manualSpeed: number;\n\n    /**\n     * The RPM of the first fan.\n     */\n    fan1Rpm: number;\n\n    /**\n     * The current humidity reading.\n     */\n    humidity: number;\n\n    /**\n     * Indicates if there is a filter alarm.\n     */\n    filterAlarm = false;\n\n    /**\n     * The filter time in minutes.\n     */\n    filterTime: number;\n\n    /**\n     * Indicates if the device is turned on.\n     */\n    on = false;\n\n    /**\n     * The firmware version of the device.\n     */\n    firmwareVersion: string;\n\n    /**\n     * The date of the firmware release.\n     */\n    firmwareDate: Date;\n\n    /**\n     * The unit type of the device.\n     */\n    unitType: number;\n\n    /**\n     * The IP address of the device.\n     */\n    ipAddress: string;\n\n    /**\n     * Creates an instance of the `Device` class.\n     * \n     * @param {string} id - The unique identifier for the device.\n     * @param {string} password - The password for the device.\n     */\n    constructor(\n        public id: string,\n        public password: string\n    ) {}\n\n    /**\n     * Converts the device state to a `Packet` for communication.\n     * \n     * @returns {Packet} The packet containing the device's current state.\n     */\n    public toPacket(): Packet {\n        const dataEntries: DataEntry[] = [\n            DataEntry.of(Parameter.SPEED, this.speed),\n            DataEntry.of(Parameter.VENTILATION_MODE, this.mode),\n            DataEntry.of(Parameter.MANUAL_SPEED, this.manualSpeed),\n            DataEntry.of(Parameter.ON_OFF, this.on ? 1 : 0)\n        ];\n        return new Packet(this.id, this.password, FunctionType.WRITEREAD, dataEntries);\n    }\n\n    /**\n     * Creates a `Device` instance from a `Packet`.\n     * \n     * @param {Packet} packet - The packet containing device data.\n     * @returns {Device} The device instance with properties populated from the packet.\n     */\n    public static fromPacket(packet: Packet): Device {\n        const device = new Device(packet.deviceId, packet.password);\n        packet.dataEntries.forEach(e => {\n            Device.applyParameter(device, e);\n        });\n        return device;\n    }\n\n    /**\n     * Applies a `DataEntry` to a `Device` instance, updating its properties.\n     * \n     * @param {Device} device - The device to update.\n     * @param {DataEntry} dataEntry - The data entry containing the parameter and value.\n     */\n    private static applyParameter(device: Device, dataEntry: DataEntry) {\n        switch(dataEntry.parameter) {\n            case Parameter.CURRENT_HUMIDITY:\n                device.humidity = dataEntry.value[0];\n                break;\n            case Parameter.VENTILATION_MODE:\n                device.mode = dataEntry.value[0];\n                break;\n            case Parameter.FAN1RPM:\n                device.fan1Rpm = dataEntry.value[0] + (dataEntry.value[1] << 8);\n                break;\n            case Parameter.FILTER_ALARM:\n                device.filterAlarm = dataEntry.value[0] === 1;\n                break;\n            case Parameter.FILTER_TIMER:\n                device.filterTime = dataEntry.value[0] + (dataEntry.value[2] * 24 + dataEntry.value[1]) * 60;\n                break;\n            case Parameter.CURRENT_IP_ADDRESS:\n                device.ipAddress = `${dataEntry.value[0]}.${dataEntry.value[1]}.${dataEntry.value[2]}.${dataEntry.value[3]}`;\n                break;\n            case Parameter.MANUAL_SPEED:\n                device.manualSpeed = dataEntry.value[0];\n                break;\n            case Parameter.SPEED:\n                device.speed = dataEntry.value[0];\n                break;\n            case Parameter.ON_OFF:\n                device.on = dataEntry.value[0] == 1;\n                break;\n            case Parameter.READ_FIRMWARE_VERSION:\n                const major = dataEntry.value[0];\n                const minor = dataEntry.value[1];\n                const day = dataEntry.value[2];\n                const month = dataEntry.value[3];\n                const year = dataEntry.value[4] + (dataEntry.value[5] << 8);\n                device.firmwareVersion = `${major}.${minor}`;\n                device.firmwareDate = new Date(`${year}-${month}-${day}`);\n                break;\n            case Parameter.UNIT_TYPE:\n                device.unitType = dataEntry.value[0];\n                break;\n        }\n    }\n}\n","/**\n * Enum representing the directions available for a device.\n * \n * The direction can be configured by the device's dip switch.\n */\nexport enum Mode {\n    /**\n     * One-way direction.\n     * The direction is set based on the dip switch on the device.\n     */\n    ONEWAY = 0,\n\n    /**\n     * Two-way direction.\n     */\n    TWOWAY = 1,\n\n    /**\n     * Inward direction.\n     */\n    IN = 2\n}\n","/**\n * Enum representing the speed options available for a device.\n */\nexport enum Speed {\n    /**\n     * The device is turned off.\n     */\n    OFF = 0,\n\n    /**\n     * The device is set to low speed.\n     */\n    LOW = 1,\n\n    /**\n     * The device is set to medium speed.\n     */\n    MEDIUM = 2,\n\n    /**\n     * The device is set to high speed.\n     */\n    HIGH = 3,\n\n    /**\n     * The device is set to manual speed.\n     * This value indicates that the speed is controlled manually.\n     */\n    MANUAL = 255\n}\n","import { CrudRepository, Page, PageRequest } from \"@apaq/leap-data-core\";\nimport { BlaubergVentoClient } from \"../client/blauberg-vento-client\";\nimport { DataEntry } from \"../client/data-entry\";\nimport { FunctionType } from \"../client/function-type\";\nimport { Packet } from \"../client/packet\";\nimport { Parameter } from \"../client/parameter\";\nimport { Response } from \"../client/response\";\nimport { Device } from \"./device\";\n\nexport class BlaubergVentoResource implements CrudRepository<Device, string>{\n\n    private client = new BlaubergVentoClient();\n    private _ipMap: Map<string, string>;\n\n    constructor() {\n        this.client.timeout = 500;\n    }\n\n    async findAll(pageable?: PageRequest): Promise<Page<Device>> {\n        pageable = pageable ?? {page: 0, size: 20};\n        pageable.size = pageable.size ?? 20;\n        pageable.page = pageable.page ?? 0;\n\n        let deviceAddresses = Array.from(await this.resolveIpMap()).map(e => {return {id:e[0], ip: e[1]}});// await this.client.findDevices();\n        const totalElements = deviceAddresses.length;\n        const totalPages = Math.ceil(totalElements / pageable.size);\n        const offset = pageable.page * pageable.size;\n        const end = offset + pageable.size;\n        deviceAddresses = deviceAddresses.filter((value, index) => index >= offset && index < end);\n\n        const devices: Device[] = [];\n        for(let i=0;i<deviceAddresses.length;i++) {\n            const device = await this.resolveDevice(deviceAddresses[i].id, deviceAddresses[i].ip);\n            devices.push(device);\n        }\n\n        return {content: devices, size: pageable.size, totalElements, totalPages};\n    }\n\n    async findById(id: string): Promise<Device> {\n        const ip = (await this.resolveIpMap()).get(id);\n        return this.resolveDevice(id, ip);\n    }\n\n    async save(entity: Device): Promise<Device> {\n        const packet = entity.toPacket();\n        const ip = (await this.resolveIpMap()).get(entity.id);\n        const response = await this.client.send(packet, ip) as Response;\n        return response != null ? Device.fromPacket(response.packet) : null;\n    }\n\n    saveAll(entities: Device[]): Promise<Device[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    deleteById(id: string): Promise<void> {\n        throw new Error(\"Devices cannot be deleted.\");\n    }\n\n    deleteAllById(ids: string[]): Promise<void> {\n        throw new Error(\"Devices cannot be deleted.\");\n    }\n\n    delete(entity: Device): Promise<void> {\n        throw new Error(\"Devices cannot be deleted.\");\n    }\n\n    deleteAll(entities: Device[]): Promise<void> {\n        throw new Error(\"Devices cannot be deleted.\");\n    }\n \n    private async resolveDevice(id: string, ip?: string): Promise<Device> {\n        const packet = new Packet(id, '1111', FunctionType.READ, [\n            DataEntry.of(Parameter.ON_OFF),\n            DataEntry.of(Parameter.VENTILATION_MODE),\n            DataEntry.of(Parameter.SPEED),\n            DataEntry.of(Parameter.MANUAL_SPEED),\n            DataEntry.of(Parameter.FAN1RPM),\n            DataEntry.of(Parameter.FILTER_ALARM),\n            DataEntry.of(Parameter.FILTER_TIMER),\n            DataEntry.of(Parameter.CURRENT_HUMIDITY),\n            DataEntry.of(Parameter.READ_FIRMWARE_VERSION),\n            DataEntry.of(Parameter.CURRENT_IP_ADDRESS)\n        ]);\n        const response = await this.client.send(packet, ip) as Response;\n        if(response == null) {\n            return null;\n        }\n\n        return Device.fromPacket(response.packet);\n    }\n\n    private async resolveIpMap(): Promise<Map<string, string>> {\n        if(this._ipMap == null) {\n            this._ipMap = new Map<string, string>();\n            const addresses = await this.client.findDevices();\n            addresses.forEach(a => this._ipMap.set(a.id, a.ip));\n        }\n        return this._ipMap;\n    }\n\n}"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","FunctionType","Parameter","exports","details","param","ON_OFF","size","SPEED","BOOT_MODE","TIMER_MODE","TIMER_COUNT_DOWN","HUMIDITY_SENSOR_ACTIVATION","VOLTAGE_SENSOR_ACTIVATION","HUMIDITY_THRESHOLD","CURRENT_RTC_BATTERY_VOLTAGE","CURRENT_HUMIDITY","CURRENT_VOLTAGE_SENSOR_STATE","CURRENT_RELAY_SENSOR_STATE","MANUAL_SPEED","FAN1RPM","FAN2RPM","FILTER_TIMER","RESET_FILTER_TIMER","BOOST_MODE_DEACTIVATION_DELAY","RTC_TIME","RTC_CALENDAR","WEEKLY_SCHEDULE","SCHEDULE_SETUP","SEARCH","MACHINE_HOURS","RESET_ALARMS","READ_ALARM","CLOUD_SERVER_OPERATION_PERMISSION","READ_FIRMWARE_VERSION","RESTORE_FACTORY_SETTINGS","FILTER_ALARM","WIFI_MODE","WIFI_NAME","WIFI_PASSWORD","WIFI_ENCRYPTION","WIFI_CHANNEL","WIFI_DHCP","IP_ADDRESS","SUBNET_MASK","VENTILATION_MODE","UNIT_TYPE","getSize","parameter","detail","find","d","_a","HEADER","Packet","constructor","deviceId","password","functionType","dataEntries","this","_deviceId","_password","_functionType","_dataEntries","toBytes","bytes","Uint8Array","index","writeCredential","forEach","WRITE","WRITEREAD","i","checksum","calculateChecksum","subarray","fromBytes","header","Error","length","idResult","readCredential","controllerId","passwordResult","dataResult","readParameters","credentialSize","credential","String","fromCharCode","charCodeAt","entries","push","DataEntry","of","undefined","BlaubergVentoClient","timeout","broadcast_address","findDevices","packet","READ","socket","createSocket","on","setBroadcast","data","send","prom","devices","lastResponseTime","Date","intervalHandle","setInterval","getTime","clearInterval","close","message","remote","RESPONSE","id","ip","address","bind","requestTime","doResolve","Device","filterAlarm","toPacket","speed","mode","manualSpeed","fromPacket","device","applyParameter","dataEntry","humidity","fan1Rpm","filterTime","CURRENT_IP_ADDRESS","ipAddress","major","minor","day","month","year","firmwareVersion","firmwareDate","unitType","Mode","Speed","client","findAll","pageable","page","_b","deviceAddresses","Array","from","resolveIpMap","map","totalElements","totalPages","Math","ceil","offset","end","filter","resolveDevice","content","findById","get","save","entity","response","saveAll","entities","deleteById","deleteAllById","ids","deleteAll","_ipMap","Map","a","set"],"mappings":";;;;;;;;;;;;;;;AAqEO,SAASA,EAAUC,EAASC,EAAYC,EAAGC,GAE9C,OAAO,IAAKD,IAAMA,EAAIE,WAAU,CAAUC,EAASC,KAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAQ,CAAG,MAAOG,GAAKL,EAAOK,GAAO,CAC3F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAU,CAAC,MAAOG,GAAKL,EAAOK,GAAO,CAC9F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAYG,IAAWA,EAAQG,EAAO,KAIhBO,KAAKR,EAAWK,EAAY,CAC9GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OACtE,GACA,CCvEA,IAAYO,ECAAC,ED0CXC,EAAAF,kBAAA,GA1CWA,EAAAA,EAAYA,eAAZA,eA0CX,CAAA,IApCGA,EAAA,KAAA,GAAA,OAOAA,EAAAA,EAAA,MAAA,GAAA,QAOAA,EAAAA,EAAA,UAAA,GAAA,YAOAA,EAAAA,EAAA,QAAA,GAAA,UAOAA,EAAAA,EAAA,QAAA,GAAA,UAOAA,EAAAA,EAAA,SAAA,GAAA,WCIHE,EAAAD,eAAA,GA7CWA,EAAAA,cAAAA,EAAAA,UA6CX,CAAA,IA5CGA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,iBAAA,GAAA,mBACAA,EAAAA,EAAA,2BAAA,IAAA,6BACAA,EAAAA,EAAA,yBAAA,IAAA,2BACAA,EAAAA,EAAA,0BAAA,IAAA,4BACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,4BAAA,IAAA,8BACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,6BAAA,IAAA,+BACAA,EAAAA,EAAA,2BAAA,IAAA,6BACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,QAAA,IAAA,UACAA,EAAAA,EAAA,QAAA,IAAA,UACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,mBAAA,KAAA,qBACAA,EAAAA,EAAA,8BAAA,KAAA,gCACAA,EAAAA,EAAA,SAAA,KAAA,WACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,gBAAA,KAAA,kBACAA,EAAAA,EAAA,eAAA,KAAA,iBACAA,EAAAA,EAAA,OAAA,KAAA,SACAA,EAAAA,EAAA,SAAA,KAAA,WACAA,EAAAA,EAAA,cAAA,KAAA,gBACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,WAAA,KAAA,aACAA,EAAAA,EAAA,kCAAA,KAAA,oCACAA,EAAAA,EAAA,sBAAA,KAAA,wBACAA,EAAAA,EAAA,yBAAA,KAAA,2BACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,cAAA,KAAA,gBACAA,EAAAA,EAAA,gBAAA,KAAA,kBACAA,EAAAA,EAAA,aAAA,KAAA,eACAA,EAAAA,EAAA,UAAA,KAAA,YACAA,EAAAA,EAAA,WAAA,KAAA,aACAA,EAAAA,EAAA,YAAA,KAAA,cACAA,EAAAA,EAAA,QAAA,KAAA,UACAA,EAAAA,EAAA,mBAAA,KAAA,qBACAA,EAAAA,EAAA,iBAAA,KAAA,mBACAA,EAAAA,EAAA,UAAA,KAAA,YAQJ,MAAME,EAA6C,CAC/C,CAAEC,MAAOH,EAASA,UAACI,OAAQC,KAAM,GACjC,CAAEF,MAAOH,EAASA,UAACM,MAAOD,KAAM,GAChC,CAAEF,MAAOH,EAASA,UAACO,UAAWF,KAAM,GACpC,CAAEF,MAAOH,EAASA,UAACQ,WAAYH,KAAM,GACrC,CAAEF,MAAOH,EAASA,UAACS,iBAAkBJ,KAAM,GAC3C,CAAEF,MAAOH,EAASA,UAACU,2BAA4BL,KAAM,GACrD,CAAEF,MAAOH,EAASA,UAACW,0BAA2BN,KAAM,GACpD,CAAEF,MAAOH,EAASA,UAACY,mBAAoBP,KAAM,GAC7C,CAAEF,MAAOH,EAASA,UAACa,4BAA6BR,KAAM,GACtD,CAAEF,MAAOH,EAASA,UAACc,iBAAkBT,KAAM,GAC3C,CAAEF,MAAOH,EAASA,UAACe,6BAA8BV,KAAM,GACvD,CAAEF,MAAOH,EAASA,UAACgB,2BAA4BX,KAAM,GACrD,CAAEF,MAAOH,EAASA,UAACiB,aAAcZ,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAACkB,QAASb,KAAM,GAClC,CAAEF,MAAOH,EAASA,UAACmB,QAASd,KAAM,GAClC,CAAEF,MAAOH,EAASA,UAACoB,aAAcf,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAACqB,mBAAoBhB,KAAM,GAC7C,CAAEF,MAAOH,EAASA,UAACsB,8BAA+BjB,KAAM,GACxD,CAAEF,MAAOH,EAASA,UAACuB,SAAUlB,KAAM,GACnC,CAAEF,MAAOH,EAASA,UAACwB,aAAcnB,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAACyB,gBAAiBpB,KAAM,GAC1C,CAAEF,MAAOH,EAASA,UAAC0B,eAAgBrB,KAAM,GACzC,CAAEF,MAAOH,EAASA,UAAC2B,OAAQtB,KAAM,IACjC,CAAEF,MAAOH,EAASA,UAAC4B,cAAevB,KAAM,GACxC,CAAEF,MAAOH,EAASA,UAAC6B,aAAcxB,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAAC8B,WAAYzB,KAAM,GACrC,CAAEF,MAAOH,EAASA,UAAC+B,kCAAmC1B,KAAM,GAC5D,CAAEF,MAAOH,EAASA,UAACgC,sBAAuB3B,KAAM,GAChD,CAAEF,MAAOH,EAASA,UAACiC,yBAA0B5B,KAAM,GACnD,CAAEF,MAAOH,EAASA,UAACkC,aAAc7B,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAACmC,UAAW9B,KAAM,GACpC,CAAEF,MAAOH,EAASA,UAACoC,UAAW/B,KAAM,GACpC,CAAEF,MAAOH,EAASA,UAACqC,cAAehC,KAAM,GACxC,CAAEF,MAAOH,EAASA,UAACsC,gBAAiBjC,KAAM,GAC1C,CAAEF,MAAOH,EAASA,UAACuC,aAAclC,KAAM,GACvC,CAAEF,MAAOH,EAASA,UAACwC,UAAWnC,KAAM,GACpC,CAAEF,MAAOH,EAASA,UAACyC,WAAYpC,KAAM,GACrC,CAAEF,MAAOH,EAASA,UAAC0C,YAAarC,KAAM,GACtC,CAAEF,MAAOH,EAASA,UAAC2C,iBAAkBtC,KAAM,GAC3C,CAAEF,MAAOH,EAASA,UAAC4C,UAAWvC,KAAM,IAQxC,CAAiBL,IAOGA,EAAA6C,QAAQC,UACpB,MAAMC,EAAS7C,EAAQ8C,MAAKC,GAAKA,EAAE9C,QAAU2C,IAC7C,OAAmB,QAAZI,EAAAH,aAAM,EAANA,EAAQ1C,YAAI,IAAA6C,EAAAA,GAAK,CAC3B,CACJ,EAXD,CAAiBlD,EAASA,YAATA,YAWhB,CAAA,ICzGD,MACMmD,EAAS,CAAC,IAAM,WAUTC,EAcT,WAAAC,CAAYC,EAAkBC,EAAkBC,EAA4BC,GACxEC,KAAKC,UAAYL,EACjBI,KAAKE,UAAYL,EACjBG,KAAKG,cAAgBL,EACrBE,KAAKI,aAAeL,CACvB,CAOD,YAAIH,GACA,OAAOI,KAAKC,SACf,CAOD,YAAIJ,GACA,OAAOG,KAAKE,SACf,CAOD,gBAAIJ,GACA,OAAOE,KAAKG,aACf,CAOD,eAAIJ,GACA,OAAOC,KAAKI,YACf,CAUM,OAAAC,GACH,IAAIC,EAAQ,IAAIC,WA7EA,KA8EZC,EAAQ,EAGZF,EAAME,KAAWf,EAAO,GACxBa,EAAME,KAAWf,EAAO,GAGxBa,EAAME,KAnFQ,EAsFdA,EAAQR,KAAKS,gBAAgBH,EAAOE,EAAOR,KAAKC,WAChDO,EAAQR,KAAKS,gBAAgBH,EAAOE,EAAOR,KAAKE,WAGhDI,EAAME,KAAWR,KAAKG,cAGtBH,KAAKI,aAAaM,SAAQ3E,IAEtB,GADAuE,EAAME,KAAWzE,EAAEqD,UACL,MAAXrD,EAAEH,QACAoE,KAAKF,cAAgBzD,EAAAA,aAAasE,OAASX,KAAKF,cAAgBzD,EAAAA,aAAauE,WAAY,CAC1F,MAAMjE,EAAOL,EAASA,UAAC6C,QAAQpD,EAAEqD,WACjC,IAAI,IAAIyB,EAAE,EAAEA,EAAElE,EAAKkE,IACfP,EAAME,KAAWzE,EAAEH,MAAMiF,EAEhC,KAIL,MAAMC,EAAWpB,EAAOqB,kBAAkBT,EAAMU,SAAS,EAAGR,IAO5D,OANAF,EAAME,KAAsB,IAAXM,EACjBR,EAAME,KAAWM,GAAY,EAG7BR,EAAQA,EAAMU,SAAS,EAAGR,GAEnBF,CACV,CASM,gBAAOW,CAAUX,GACpB,IAAIE,EAAQ,EAGZ,MAAMU,EAAS,CAACZ,EAAME,KAAUF,EAAME,MACtC,GAAGU,EAAO,IAAMzB,EAAO,IAAMyB,EAAO,IAAMzB,EAAO,GAAI,MAAM,IAAI0B,MAAM,mBAIrE,GAnIc,GAkIQb,EAAME,KACM,MAAM,IAAIW,MAAM,0BAKlD,GAFiBzB,EAAOqB,kBAAkBT,EAAMU,SAAS,EAAGV,EAAMc,OAAS,KACtDd,EAAMA,EAAMc,OAAS,IAAMd,EAAMA,EAAMc,OAAS,IAAM,GAC9C,MAAM,IAAID,MAAM,qBAG7C,MAAME,EAAW3B,EAAO4B,eAAehB,EAAOE,GACxCe,EAAeF,EAAS,GAC9Bb,EAAQa,EAAS,GAGjB,MAAMG,EAAiB9B,EAAO4B,eAAehB,EAAOE,GAC9CX,EAAW2B,EAAe,GAChChB,EAAQgB,EAAe,GAGvB,MAAM1B,EAAeQ,EAAME,KAGrBiB,EAAa/B,EAAOgC,eAAepB,EAAOE,GAEhD,OAAO,IAAId,EAAO6B,EAAc1B,EAAUC,EAAc2B,EAAW,GACtE,CASO,qBAAOH,CAAehB,EAAmBE,GAC7C,MAAMmB,EAAiBrB,EAAME,KAC7B,IAAIoB,EAAa,GACjB,IAAK,IAAIf,EAAI,EAAGA,EAAIc,EAAgBd,IAChCe,GAAcC,OAAOC,aAAaxB,EAAME,MAE5C,MAAO,CAACoB,EAAYpB,EACvB,CAUO,eAAAC,CAAgBH,EAAmBE,EAAe5E,GACtD0E,EAAME,KAAW5E,EAAMwF,OACvB,IAAK,IAAIP,EAAI,EAAGA,EAAIjF,EAAMwF,OAAQP,IAC9BP,EAAME,KAAW5E,EAAMmG,WAAWlB,GAEtC,OAAOL,CACV,CASO,qBAAOkB,CAAepB,EAAmBE,GAC7C,MAAMwB,EAAuB,GAC7B,KAAMxB,EAAQF,EAAMc,OAAS,GAAG,CAC5B,IACIxF,EADAwD,EAAYkB,EAAME,KAElB7D,EAAO,EACX,GAAgB,KAAbyC,EAECzC,EAAO2D,EAAME,KACbpB,EAAYkB,EAAME,UAGlB,GADA7D,EAAOL,EAASA,UAAC6C,QAAQC,GACtBzC,EAAO,EAAG,MAAM,IAAIwE,MAAM,4BAA4B/B,MAG7D,GAAGzC,EAAO,EAAG,CACTf,EAAQ,IAAI2E,WAAW5D,GACvB,IAAI,IAAIkE,EAAI,EAAGA,EAAIlE,EAAMkE,IACrBjF,EAAMiF,GAAKP,EAAME,IAExB,CACDwB,EAAQC,KAAK,CAAC7C,YAAWxD,SAC5B,CACD,MAAO,CAACoG,EAASxB,EACpB,CAQO,wBAAOO,CAAkBT,GAC7B,IAAIQ,EAAW,EACf,IAAI,IAAID,EAAI,EAAGA,EAAIP,EAAMc,OAAQP,IAC7BC,GAAYR,EAAMO,GAEtB,OAAkB,MAAXC,CACV,ECpNJvE,EAAA2F,eAAA,GAdgBA,EAASA,YAATA,YAchB,CAAA,IAHmBC,GAAhB,CAAmB/C,EAAsBxD,KAC9B,CAACwD,YAAWxD,MAAgB,MAATA,EAAgB2E,WAAW4B,GAAGvG,QAASwG,UCI5DC,EAAb,WAAA1C,GAEIK,KAAOsC,QAxBa,IAyBpBtC,KAAiBuC,kBA1BK,iBA0IzB,CArGgB,WAAAC,4CACT,MAAMC,EAAS,IAAI/C,EAAO,mBAAoB,GAAIrD,EAAYA,aAACqG,KAAM,CAACR,EAASA,UAACC,GAAG7F,EAASA,UAAC2B,UACvF0E,EAASC,eAAa,QAG5BD,EAAOE,GAAG,aAAa,WACnBF,EAAOG,cAAa,GACpB,MAAMC,EAAON,EAAOpC,UACpBsC,EAAOK,KAAKD,EAAM,IAAM/C,KAAKuC,kBACjC,IAGA,MAAMU,EAAO,IAAIzH,SAAyBC,IACtC,MAAMyH,EAA2B,GACjC,IAAIC,EAAmB,IAAIC,KAG3B,MAAMC,EAAiBC,aAAY,MACnB,IAAIF,MACTG,UAAYJ,EAAiBI,UAAYvD,KAAKsC,UACjDkB,cAAcH,GACdV,EAAOc,QACPhI,EAAQyH,GACX,GACF,IAGHP,EAAOE,GAAG,WAAW,CAAUa,EAASC,KACpC,MAAMlB,EAAS/C,EAAOuB,UAAUyC,GAG7BjB,EAAO3C,cAAgBzD,EAAYA,aAACuH,WACnCV,EAAQjB,KAAK,CAAC4B,GAAIpB,EAAO7C,SAAUkE,GAAIH,EAAOI,UAC9CZ,EAAmB,IAAIC,KAE/B,GAAE,IAKN,OADAT,EAAOqB,OACAf,IACV,CAYM,IAAAD,CAAKP,EAAgBqB,EAAa9D,KAAKuC,mBAC1C,MAAMI,EAASC,eAAa,QAItBK,EAAO,IAAIzH,SAAyBC,IACtC,IAAIwI,EAAc,IAAIb,KAGtB,MAAMc,EAAY,CAACzB,EAAiBqB,KAEhCN,cAAcH,GACdV,EAAOc,QACPhI,EAAkB,MAAVgH,EAAiB,CAACA,SAAQqB,MAAM,KAAK,EAI3CT,EAAiBC,aAAY,MACnB,IAAIF,MACTG,UAAYU,EAAYV,UAAYvD,KAAKsC,SAC5C4B,GACH,GACF,IAGHvB,EAAOE,GAAG,aAAa,KACnBoB,EAAc,IAAIb,KAClB,MAAML,EAAON,EAAOpC,UAEpBsC,EAAOK,KAAKD,EAAM,IAAMe,EAC5B,IAGAnB,EAAOE,GAAG,WAAW,CAAUa,EAASC,KACpC,MAAMlB,EAAS/C,EAAOuB,UAAUyC,GAG7BjB,EAAO3C,cAAgBzD,EAAYA,aAACuH,UACnCM,EAAUzB,EAAQkB,EAAOI,QAEjC,GAAE,IAKN,OADApB,EAAOqB,OACAf,CACV,QCzIQkB,EAoET,WAAAxE,CACWkE,EACAhE,GADAG,KAAE6D,GAAFA,EACA7D,KAAQH,SAARA,EAxCXG,KAAWoE,aAAG,EAUdpE,KAAE6C,IAAG,CA+BD,CAOG,QAAAwB,GACH,MAAMtE,EAA2B,CAC7BmC,EAAAA,UAAUC,GAAG7F,EAAAA,UAAUM,MAAOoD,KAAKsE,OACnCpC,EAAAA,UAAUC,GAAG7F,EAAAA,UAAU2C,iBAAkBe,KAAKuE,MAC9CrC,EAAAA,UAAUC,GAAG7F,EAAAA,UAAUiB,aAAcyC,KAAKwE,aAC1CtC,EAASA,UAACC,GAAG7F,YAAUI,OAAQsD,KAAK6C,GAAK,EAAI,IAEjD,OAAO,IAAInD,EAAOM,KAAK6D,GAAI7D,KAAKH,SAAUxD,EAAYA,aAACuE,UAAWb,EACrE,CAQM,iBAAO0E,CAAWhC,GACrB,MAAMiC,EAAS,IAAIP,EAAO1B,EAAO7C,SAAU6C,EAAO5C,UAIlD,OAHA4C,EAAO1C,YAAYW,SAAQ3E,IACvBoI,EAAOQ,eAAeD,EAAQ3I,EAAE,IAE7B2I,CACV,CAQO,qBAAOC,CAAeD,EAAgBE,GAC1C,OAAOA,EAAUxF,WACb,KAAK9C,EAASA,UAACc,iBACXsH,EAAOG,SAAWD,EAAUhJ,MAAM,GAClC,MACJ,KAAKU,EAASA,UAAC2C,iBACXyF,EAAOH,KAAOK,EAAUhJ,MAAM,GAC9B,MACJ,KAAKU,EAASA,UAACkB,QACXkH,EAAOI,QAAUF,EAAUhJ,MAAM,IAAMgJ,EAAUhJ,MAAM,IAAM,GAC7D,MACJ,KAAKU,EAASA,UAACkC,aACXkG,EAAON,YAAqC,IAAvBQ,EAAUhJ,MAAM,GACrC,MACJ,KAAKU,EAASA,UAACoB,aACXgH,EAAOK,WAAaH,EAAUhJ,MAAM,GAAsD,IAA3B,GAArBgJ,EAAUhJ,MAAM,GAAUgJ,EAAUhJ,MAAM,IACpF,MACJ,KAAKU,EAASA,UAAC0I,mBACXN,EAAOO,UAAY,GAAGL,EAAUhJ,MAAM,MAAMgJ,EAAUhJ,MAAM,MAAMgJ,EAAUhJ,MAAM,MAAMgJ,EAAUhJ,MAAM,KACxG,MACJ,KAAKU,EAASA,UAACiB,aACXmH,EAAOF,YAAcI,EAAUhJ,MAAM,GACrC,MACJ,KAAKU,EAASA,UAACM,MACX8H,EAAOJ,MAAQM,EAAUhJ,MAAM,GAC/B,MACJ,KAAKU,EAASA,UAACI,OACXgI,EAAO7B,GAA2B,GAAtB+B,EAAUhJ,MAAM,GAC5B,MACJ,KAAKU,EAASA,UAACgC,sBACX,MAAM4G,EAAQN,EAAUhJ,MAAM,GACxBuJ,EAAQP,EAAUhJ,MAAM,GACxBwJ,EAAMR,EAAUhJ,MAAM,GACtByJ,EAAQT,EAAUhJ,MAAM,GACxB0J,EAAOV,EAAUhJ,MAAM,IAAMgJ,EAAUhJ,MAAM,IAAM,GACzD8I,EAAOa,gBAAkB,GAAGL,KAASC,IACrCT,EAAOc,aAAe,IAAIpC,KAAK,GAAGkC,KAAQD,KAASD,KACnD,MACJ,KAAK9I,EAASA,UAAC4C,UACXwF,EAAOe,SAAWb,EAAUhJ,MAAM,GAG7C,EC/JL,IAAY8J,ECFAC,EDkBXpJ,EAAAmJ,UAAA,GAhBWA,EAAAA,EAAIA,OAAJA,OAgBX,CAAA,IAXGA,EAAA,OAAA,GAAA,SAKAA,EAAAA,EAAA,OAAA,GAAA,SAKAA,EAAAA,EAAA,GAAA,GAAA,KCSHnJ,EAAAoJ,WAAA,GA1BWA,EAAAA,EAAKA,QAALA,QA0BX,CAAA,IAtBGA,EAAA,IAAA,GAAA,MAKAA,EAAAA,EAAA,IAAA,GAAA,MAKAA,EAAAA,EAAA,OAAA,GAAA,SAKAA,EAAAA,EAAA,KAAA,GAAA,OAMAA,EAAAA,EAAA,OAAA,KAAA,+DCdA,WAAAhG,GAHQK,KAAA4F,OAAS,IAAIvD,EAIjBrC,KAAK4F,OAAOtD,QAAU,GACzB,CAEK,OAAAuD,CAAQC,qDACVA,EAAWA,QAAAA,EAAY,CAACC,KAAM,EAAGpJ,KAAM,KAC9BA,KAAwB,QAAjB6C,EAAAsG,EAASnJ,YAAQ,IAAA6C,EAAAA,EAAA,GACjCsG,EAASC,KAAwB,QAAjBC,EAAAF,EAASC,YAAQ,IAAAC,EAAAA,EAAA,EAEjC,IAAIC,EAAkBC,MAAMC,WAAWnG,KAAKoG,gBAAgBC,KAAItK,IAAa,CAAC8H,GAAG9H,EAAE,GAAI+H,GAAI/H,EAAE,OAC7F,MAAMuK,EAAgBL,EAAgB7E,OAChCmF,EAAaC,KAAKC,KAAKH,EAAgBR,EAASnJ,MAChD+J,EAASZ,EAASC,KAAOD,EAASnJ,KAClCgK,EAAMD,EAASZ,EAASnJ,KAC9BsJ,EAAkBA,EAAgBW,QAAO,CAAChL,EAAO4E,IAAUA,GAASkG,GAAUlG,EAAQmG,IAEtF,MAAMzD,EAAoB,GAC1B,IAAI,IAAIrC,EAAE,EAAEA,EAAEoF,EAAgB7E,OAAOP,IAAK,CACtC,MAAM6D,QAAe1E,KAAK6G,cAAcZ,EAAgBpF,GAAGgD,GAAIoC,EAAgBpF,GAAGiD,IAClFZ,EAAQjB,KAAKyC,EAChB,CAED,MAAO,CAACoC,QAAS5D,EAASvG,KAAMmJ,EAASnJ,KAAM2J,gBAAeC,gBACjE,CAEK,QAAAQ,CAASlD,4CACX,MAAMC,SAAY9D,KAAKoG,gBAAgBY,IAAInD,GAC3C,OAAO7D,KAAK6G,cAAchD,EAAIC,KACjC,CAEK,IAAAmD,CAAKC,4CACP,MAAMzE,EAASyE,EAAO7C,WAChBP,SAAY9D,KAAKoG,gBAAgBY,IAAIE,EAAOrD,IAC5CsD,QAAiBnH,KAAK4F,OAAO5C,KAAKP,EAAQqB,GAChD,OAAmB,MAAZqD,EAAmBhD,EAAOM,WAAW0C,EAAS1E,QAAU,OAClE,CAED,OAAA2E,CAAQC,GACJ,MAAM,IAAIlG,MAAM,0BACnB,CAED,UAAAmG,CAAWzD,GACP,MAAM,IAAI1C,MAAM,6BACnB,CAED,aAAAoG,CAAcC,GACV,MAAM,IAAIrG,MAAM,6BACnB,CAED,OAAO+F,GACH,MAAM,IAAI/F,MAAM,6BACnB,CAED,SAAAsG,CAAUJ,GACN,MAAM,IAAIlG,MAAM,6BACnB,CAEa,aAAA0F,CAAchD,EAAYC,4CACpC,MAAMrB,EAAS,IAAI/C,EAAOmE,EAAI,OAAQxH,EAAYA,aAACqG,KAAM,CACrDR,YAAUC,GAAG7F,EAASA,UAACI,QACvBwF,YAAUC,GAAG7F,EAASA,UAAC2C,kBACvBiD,YAAUC,GAAG7F,EAASA,UAACM,OACvBsF,YAAUC,GAAG7F,EAASA,UAACiB,cACvB2E,YAAUC,GAAG7F,EAASA,UAACkB,SACvB0E,YAAUC,GAAG7F,EAASA,UAACkC,cACvB0D,YAAUC,GAAG7F,EAASA,UAACoB,cACvBwE,YAAUC,GAAG7F,EAASA,UAACc,kBACvB8E,YAAUC,GAAG7F,EAASA,UAACgC,uBACvB4D,YAAUC,GAAG7F,EAASA,UAAC0I,sBAErBmC,QAAiBnH,KAAK4F,OAAO5C,KAAKP,EAAQqB,GAChD,OAAe,MAAZqD,EACQ,KAGJhD,EAAOM,WAAW0C,EAAS1E,UACrC,CAEa,YAAA2D,4CAMV,OALkB,MAAfpG,KAAK0H,SACJ1H,KAAK0H,OAAS,IAAIC,WACM3H,KAAK4F,OAAOpD,eAC1B9B,SAAQkH,GAAK5H,KAAK0H,OAAOG,IAAID,EAAE/D,GAAI+D,EAAE9D,OAE5C9D,KAAK0H,SACf"}